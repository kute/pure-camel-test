package com.kute.camel;import lombok.extern.slf4j.Slf4j;import org.apache.camel.CamelContext;import org.apache.camel.Exchange;import org.apache.camel.LoggingLevel;import org.apache.camel.Processor;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.builder.RouteBuilderLifecycleStrategy;import org.apache.camel.component.file.FileEndpointConfigurer;import org.apache.camel.converter.stream.CachedOutputStream;import org.apache.camel.impl.DefaultCamelContext;import org.apache.camel.impl.engine.DefaultCamelContextNameStrategy;import org.junit.jupiter.api.Test;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;/** * created by kute at 2020/8/2 10:46 上午 */@Slf4jpublic class QuickStart extends AbstractTest {    @Test    public void simple() throws Exception {        CamelContext camelContext = new DefaultCamelContext();        camelContext.setLogMask(Boolean.TRUE);        camelContext.setStreamCaching(Boolean.TRUE);        camelContext.setNameStrategy(new DefaultCamelContextNameStrategy("pure-camel"));        RouteBuilder routeBuilder = new RouteBuilder() {            @Override            public void configure() throws Exception {                from("direct:start")                        .to("log:logTest?level=INFO");            }        };        routeBuilder.addLifecycleInterceptor(new RouteBuilderLifecycleStrategy() {            @Override            public void beforeConfigure(RouteBuilder builder) {                log.info("pure-camel lifecycleInterceptor beforeConfigure builder={}", builder);            }            @Override            public void afterConfigure(RouteBuilder builder) {                log.info("pure-camel lifecycleInterceptor afterConfigure builder={}", builder);            }        });        camelContext.addRoutes(routeBuilder);        camelContext.start();        camelContext.createFluentProducerTemplate()                .to("direct:start")                .withBody("hello world")                .request(String.class);        TimeUnit.SECONDS.sleep(5);        camelContext.stop();    }    /**     * file endpoint 扩展点选项：     * {@link FileEndpointConfigurer}     *     * @throws Exception     */    @Test    public void testFileEndpointRoute() throws Exception {        CamelContext camelContext = new DefaultCamelContext();        camelContext.setLogMask(Boolean.TRUE);        camelContext.setNameStrategy(new DefaultCamelContextNameStrategy("pure-camel"));        RouteBuilder routeBuilder = new RouteBuilder() {            @Override            public void configure() throws Exception {                from("file:data/inbox?noop=true")                        .to("file:data/outbox");            }        };        camelContext.addRoutes(routeBuilder);        camelContext.start();        TimeUnit.SECONDS.sleep(5);        camelContext.stop();    }    @Test    public void testRouteBuild() {        superTest(new RouteBuilder() {            @Override            public void configure() throws Exception {                from("file:data/inbox?noop=true")                        .streamCaching()                        .filter(xpath("/order[not(@test)]"))                        .log(LoggingLevel.INFO, "receive message: ${header.CamelFileName}")                        .process(new Processor() {                            @Override                            public void process(Exchange exchange) throws Exception {                                System.out.println("receive message:" + exchange.getIn().getBody());                            }                        })                        .choice()                        .when(header("CamelFileName").endsWith("xml"))                        .to("file:data/outbox/xml")                        .when(header("CamelFileName").regex("^.*(csv|csl)$"))                        .to("file:data/outbox/csv-csl")                        .otherwise()                        .to("file:data/outbox/other")                        // stop方法表明 当前的这个route（"file:data/outbox/csv-csl"）执行完成之后，则不再继续执行剩余的route,如后面的（"file:data/outbox/all"）                        .stop()                        // 这里end方法是标明 choice 的结束标志，这样可以继续添加其他的processor继续处理                        .end()                        .to("file:data/outbox/all");            }        }, 10);    }    /**     * multicast 和普通的 to 多个route区别：     * 加了multicast发送时会消息会被复制多份，可以指定线程池来并发。     * 不加的话 消息是 依次逐个发送到 各个 endpoint     */    @Test    public void testMulticast() {        superTest(new RouteBuilder() {            @Override            public void configure() throws Exception {                from("file:data/inbox?noop=true")                        .to("file:data/outbox/end-1")                        .log("end message: ${header.CamelFileName}")                        .to("file:data/outbox/end-2")                        .log("end message: ${header.CamelFileName}");            }        });        superTest(new RouteBuilder() {            @Override            public void configure() throws Exception {                from("file:data/inbox?noop=true")                        .multicast()                        // 在遇到第一个exception后就停止multicast                        .stopOnException()                        .executorService(Executors.newFixedThreadPool(2))                        .parallelProcessing()                        .to("file:data/outbox/end-1")                        .log("end con message: ${header.CamelFileName}")                        .to("file:data/outbox/end-2")                        .log("end con message: ${header.CamelFileName}");            }        });    }}